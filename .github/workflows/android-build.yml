# 🚀 AI算命大师 - GitHub Actions自动构建APK
name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: ☕ 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 安装依赖
      run: |
        npm ci
        
    - name: 🔧 设置Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        
    - name: 🎯 设置Android环境变量
      run: |
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        
    - name: 📋 缓存Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔑 生成签名密钥 (仅用于测试)
      run: |
        mkdir -p android/app
        keytool -genkey -v -keystore android/app/debug.keystore \
          -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000 \
          -dname "CN=Android Debug,O=Android,C=US" \
          -storepass android -keypass android
          
    - name: 🛠️ 确保Gradle Wrapper可执行
      run: |
        chmod +x android/gradlew
        
    - name: 🏗️ 构建APK (Debug版本)
      run: |
        cd android
        ./gradlew assembleDebug --stacktrace --info
        
    - name: 🏗️ 构建APK (Release版本)
      run: |
        cd android
        ./gradlew assembleRelease --stacktrace --info
        
    - name: 📤 上传Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
        if-no-files-found: warn
        
    - name: 📤 上传Release APK  
      uses: actions/upload-artifact@v4
      with:
        name: app-release-apk
        path: android/app/build/outputs/apk/release/app-release.apk
        if-no-files-found: warn
        
    - name: 📊 APK分析
      run: |
        echo "🔍 检查构建产物..."
        find android/app/build/outputs -name "*.apk" -type f
        echo ""
        
        if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
          DEBUG_SIZE=$(stat -c%s android/app/build/outputs/apk/debug/app-debug.apk)
          DEBUG_SIZE_MB=$((DEBUG_SIZE / 1024 / 1024))
          echo "🐛 Debug APK大小: ${DEBUG_SIZE_MB}MB"
        fi
        
        if [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
          RELEASE_SIZE=$(stat -c%s android/app/build/outputs/apk/release/app-release.apk)
          RELEASE_SIZE_MB=$((RELEASE_SIZE / 1024 / 1024))
          echo "🚀 Release APK大小: ${RELEASE_SIZE_MB}MB"
          
          if [ $RELEASE_SIZE_MB -lt 50 ]; then
            echo "✅ APK大小符合Google Play要求 (<50MB)"
          else
            echo "⚠️ APK大小可能需要优化"
          fi
        fi
        
        echo "🎉 AI算命大师APK构建完成！"